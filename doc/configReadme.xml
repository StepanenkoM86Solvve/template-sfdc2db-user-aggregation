<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce and Database User Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce administrator I want to aggregate users from a Salesforce instance and a database, and compare them to see which users are in one of the two and which users are in both.

This template has these features: 

- Generates a CSV results report that is sent by email to addresses you configure.
- Extracts data from two systems, aggregates data, compares values of fields for the objects, and generates a report of the differences. 
- Gets users from a Salesforce instance and a database table, compares by the email address of the users, and generates a CSV file that shows users in A, users in B (being "B" the database), and users in A and B. The report is then emailed to a configured group of email addresses.
		</section>
		<section id="considerations">
<![CDATA[
To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made for all to run smoothly. Failing to do so could lead to unexpected behavior of the template.

**Note:** This template illustrates the aggregation use case between Salesforce and a database, thus it requires a database instance to work.
The template comes package with a SQL script to create the database table it uses. 
It is your responsibility to use that script to create the table in an available schema and change the configuration accordingly.
The SQL script file can be found in src/main/resources/sfdc2jdbc.sql.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
After your app is running, if you chose `useraggregation` as the domain name to trigger the use case, browse to `http://useraggregation.cloudhub.io/generatereport`, which invokes the app and sends the CSV report to the emails you configure.
]]>
		</section>
		<section id="running_on_standalone">
<![CDATA[
After this, to trigger the use case, browse to the endpoint using the port you configured in your file. If you set `9090` as the port, browse to `http://localhost:9090/synccontacts`. This URL creates the CSV report and sends it to the emails you set.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
**HTTP Connector Configuration**	
+ http.port `9090` 

**SalesForce Connector Configuration**
+ sfdc.username `bob.dylan@org`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**database Connector Configuration**
+ db.host `localhost`
+ db.port `3306`
+ db.user `mule_user`
+ db.password `mule_pwd`
+ db.databasename `template-sfdc2db-user-aggregation`

**SMTP Services Configuration**
+ smtp.host `smtp.example.com`
+ smtp.port `587`
+ smtp.user `exampleuser@example.com`
+ smtp.password `ExamplePassword456`

**Email dDetails**
+ mail.from `exampleuser1@example.com`
+ mail.to `exampleuser2@example.com`
+ mail.subject `Users Report`
+ mail.body `Find attached your users report`
+ attachment.name `users_report.csv`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API calls that can be made. However, this template makes only one API call to Salesforce during aggregation. 
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
The file where you find the endpoint to start the aggregation. This template uses an HTTP Listener as the way to trigger the use case.

$H$H# Trigger Flow
**HTTP Inbound Endpoint** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub then routes requests from your application domain URL to the endpoint.

]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
The functional aspect of this template is implemented in its XML directed by a flow responsible for conducting the aggregation of data, comparing records and finally formatting the output as a report.

Using the Scatter-Gather component, the template queriesng the data in different systems. After that the aggregation is implemented in a DataWeave 2 script using Transform component.

Aggregated results are sorted by:

1. Users only in Salesforce.
2. Users only in the database.
3. Users in both Salesforce and the database.

These are transformed to CSV format. The final report in CSV format is sent to email addresses you configured in the mule.*.properties file.
]]>
		</section>
	</sections>
</configuration>
